{% extends "base.html.jinja" %}

{% block title %}Fasta Upload{% endblock %}

{% block head %}
{{ super() }}
<style type="text/css">
    .container-fluid {
        height: 100%;
        min-height: 90vh;
    }

    #drop-area {
        border: 2px dashed #ccc;
        border-radius: 20px;
        width: 480px;
        font-family: sans-serif;
        margin: 100px auto;
        padding: 20px;
    }

    #drop-area.highlight {
        border-color: purple;
    }

    p {
        margin-top: 0;
    }

    .my-form {
        margin-bottom: 10px;
    }

    #gallery {
        margin-top: 10px;
    }

    #gallery img {
        width: 150px;
        margin-bottom: 10px;
        margin-right: 10px;
        vertical-align: middle;
    }

    .button {
        display: inline-block;
        padding: 10px;
        background: #ccc;
        cursor: pointer;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    .button:hover {
        background: #ddd;
    }

   
</style>
{% endblock %}
{% block content %}
<div class="container-fluid d-flex flex-column">
    <div class="my-auto">
        <div id="drop-area">
            <form class="my-form" id="file-upload-form">
                <p>Upload multiple files with the file dialog or by dragging and dropping images onto the dashed region
                </p>
                <input type="file" id="fileElem" multiple accept=".fasta" >
                <label class="button" for="fileElem">Select some files</label>
                <button type="submit" class="button">Upload Files</button>
                <button onclick="clearFiles()" class="button">Clear Files</button>
            </form>
        </div>

    </div>
</div>
<script>

   let dropArea = document.getElementById('drop-area');
let selectedFiles = []; // To store selected files

// Prevent default drag behaviors
['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    dropArea.addEventListener(eventName, preventDefaults, false)
})

function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
}

// Highlight drop area when dragging files over it
['dragenter', 'dragover'].forEach(eventName => {
    dropArea.addEventListener(eventName, highlight, false)
});
['dragleave', 'drop'].forEach(eventName => {
    dropArea.addEventListener(eventName, unhighlight, false)
});

function highlight(e) {
    dropArea.classList.add('highlight');
}

function unhighlight(e) {
    dropArea.classList.remove('highlight');
}

// Handle file selection
document.getElementById('fileElem').addEventListener('change', function(e) {
    selectedFiles = e.target.files;
});

// Handle file drop
dropArea.addEventListener('drop', function(e) {
    let dt = e.dataTransfer;
    selectedFiles = dt.files;
});

// Upload files on form submission
document.getElementById('file-upload-form').addEventListener('submit', function(e) {
    e.preventDefault(); // Prevent the default form submission
    Array.from(selectedFiles).forEach(uploadFile); // Upload selected files
});

function clearFiles(){
  document.getElementById("fileElem").value=null;

}

function uploadFile(file) {
    let url = '/post-fasta';
    let formData = new FormData();

    formData.append('file', file);

    fetch(url, {
        method: 'POST',
        body: formData
    })
    .then(() => { console.log("uploaded"); })
    .catch(() => { console.log("it broke"); });
}
</script>
{% endblock %}